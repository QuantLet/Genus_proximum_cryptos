%% Factor modelling of assets

%% Global Commands


clear;clc;

% specify directoy for the files
directory='D:\PROIECTE\Cryptos 2019\New_data_2020';
addpath(genpath(directory));
cd(directory);



%set global commands for font size and line width
size_font=9;
size_line=1.5;
set(0,'DefaultAxesFontSize',size_font,'DefaultTextFontSize',size_font);
set(0,'defaultlinelinewidth',size_line)

% figures
set(0, 'defaultFigurePapertype', 'A4');
set(0, 'defaultFigurePaperUnits', 'centimeters');
set(0, 'defaultFigurePaperPositionMode', 'auto');
figure_wide=[680 678 800 420];

% colors
color_blue=[0 102 204]./255;
color_green=[0 204 102]./255;
color_red=[204 0 0]./255;
color_black=[0 0 0];

color_purple= [0.75 0 0.75];
color_yellow=  [1 1 0];
% reset rngs before running
rng(1)



%% Data
%load('assets_2021_a.mat');
%% Import data from text file
% Import data from text file
% Script for importing data from the following text file:
%
%    filename: D:\PROIECTE\Cryptos 2019\New_data_2020\new_assets_2021_a.csv
%
% Auto-generated by MATLAB on 13-Jan-2021 17:34:22

% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 7);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["name", "symbol", "type", "logreturn", "type_num", "name_symb", "date"];
opts.VariableTypes = ["string", "string", "string", "double", "string", "string", "datetime"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["name", "symbol", "type", "name_symb", "type_num"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["name", "symbol", "type", "name_symb","type_num"], "EmptyFieldRule", "auto");
opts = setvaropts(opts, "date", "InputFormat", "MM/dd/yyyy");

% Import the data
tbl = readtable("D:\PROIECTE\Cryptos 2019\New_data_2020\new_assets_2021_c.csv", opts);

%Convert to output type
name = tbl.name;
symbol = tbl.symbol;
type = tbl.type;
logreturn = tbl.logreturn;
type_num = tbl.type_num;
name_symb = tbl.name_symb;
date = tbl.date;

% Clear temporary variables
clear opts tbl
%%





[asset_unique,index_unique]=unique(name,'stable');
%{
index_del=find(strcmp('Tether',asset_unique)==1);
asset_unique([index_del])=[];
index_unique([index_del])=[];


index_del=find(strcmp('LINDE',asset_unique)==1);


index_del2=find(strcmp('Credit Tag Chain',asset_unique)==1);
index_del3=find(strcmp('UNI COIN',asset_unique)==1); 
index_del4=find(strcmp('CryptalDash',asset_unique)==1);
index_del5=find(strcmp('Maximine Coin',asset_unique)==1); 
index_del6=find(strcmp('PeepCoin',asset_unique)==1);

asset_unique([index_del,index_del2,index_del3,index_del4,index_del5,index_del6])=[];
index_unique([index_del,index_del2,index_del3,index_del4,index_del5,index_del6])=[];
%}

%%
% number of assets
n_assets=length(asset_unique);
% dates numeric
date_num=datenum(date);
[date_unique,date_indices]=sort(unique(date_num,'stable'));
t_max=length(date_unique);
% init
ret=cell(n_assets,1);
type_assets=cell(2,1); % 6 asset types
% return separately
for i=1:n_assets
    index_asset=strcmp(asset_unique(i),name);
    ret{i,1}=logreturn(index_asset);
    ret{i,2}=date_num(index_asset);
    type_assets{i,1}=type_num{index_unique(i)};
    
end
symb_assets=symbol(index_unique);
%% Statistics

    
    % In-Sample
    stats_raw = fun_stat_static_2021_01_13(ret,n_assets);
%% Subset

subset=[1:3 4 6   8:25  28];
%subset=[1:28];
 stats=stats_raw(:,subset);

est_labels_raw={'Variance'; 'Skewness';'Kurtosis';...
    'Stable \alpha';'Stable \beta';'Stable \gamma';...
    'Stable \delta';'Q_{5%}';'Q_{2.5%}';'Q_{1%}';'Q_{0.5%}';...
    'CTE_{5%}';'CTE_{2.5%}';'CTE_{1%}';'CTE_{0.5%}';...
    'Q_{95%}';'Q_{97.5%}';'Q_{99%}';'Q_{99.5%}';...
    'CTE_{95%}';'CTE_{97.5%}';'CTE_{99%}';'CTE_{99.5%}';...
    'ACF Lag 1'; 'Hurst';'GARCH parameter';'ARCH parameter';'FIGARCH d'};
est_labels=est_labels_raw(subset,1);
 
index_crypto=strcmp(type_assets,'1.Crypto');

symb_assets(symb_assets(:,1)=='#IBBEU00')='.IBBEU003D';
symb_assets(symb_assets(:,1)=='#IBLUS00')='.IBLUS0004';
% Check = {'BTC','ETH','XRP','BCH','LTC','USDT',	'BNB','LINK','ADA','DOT','PAX',...
   % 'TUSD','USDC','EURS','GUSD','XAU','CHF','GBP','.IBLUS0004','.IBBEU003D',...
	
  % 'SUSD'	,'ZB','HT', 'ZT', 'BHP',	'BNT',	'KAN',	'C20',...
   % 'VET',	'ELA',	'BTG',	'QKC',	'INO'};  
 Check = {'BTC','ETH','XRP','BCH','LTC','USDT',	'CHF','.IBLUS0004','.IBBEU003D'};
Match=cellfun(@(x) ismember(x, Check), symb_assets, 'UniformOutput', 0);
index_show=find(cell2mat(Match));


%% Corr

h=figure();
Rho=corr(stats);
Sigma=cov(stats);
imagesc(Rho);
colormap(coolwarm);
set(gca,'YTick',[1:length(est_labels)],'YTickLabel',est_labels, 'FontSize', 10);
set(gca,'XTick',[1:length(est_labels)],'XTickLabel',est_labels, 'FontSize', 10);
xtickangle(90);
colorbar();
print(h,'-depsc','-r300') %-depsc
%% Eigenvalues
h=figure();
Eig=eig(Rho);
pareto(Eig);
xlabel('Factors')
ylabel('Eigenvalue')

print(h,'-depsc','-r300') %-depsc

%% Factor model

[loadings,F,f2] = factor_an_static(stats);

h=figure();
imagesc(loadings)
colormap(coolwarm)
xlabel('Factor')
ylabel('Loading')
set(gca,'YTick',[1:length(F)],'YTickLabel',est_labels, 'FontSize', 10);
colorbar()
set(gca,'XTick',[1:3])
print(h,'-depsc','-r300') %-depsc

%% plot, correlation of the original variable with the PCs

h=figure()
hold on
xlim([-1.2 1.2])
ylim([-1.2 1.2])
line([-1.2 1.2],[0 0],'Color','k')
line([0 0],[1.2 -1.2],'Color','k')

xlabel('Tail factor')
ylabel('Moment factor')
daspect([1,1,1])
plot(exp((-1)^.5*[0:2*pi/360:2*pi]))        % plot unit circle
box on
rgb=[0 0 1];
scatter(loadings(:,1),loadings(:,2), 'Filled');
textfit(loadings(:,1),loadings(:,2),est_labels);
hold off;
print(h,'-depsc','-r300') %-depsc

h=figure()
hold on
xlim([-1.2 1.2])
ylim([-1.2 1.2])
line([-1.2 1.2],[0 0],'Color','k')
line([0 0],[1.2 -1.2],'Color','k')

xlabel('Tail factor')
ylabel('Memory factor')
daspect([1,1,1])
plot(exp((-1)^.5*[0:2*pi/360:2*pi]))        % plot unit circle
box on
rgb=[0 0 1];
scatter(loadings(:,1),loadings(:,3), 'Filled');
textfit(loadings(:,1),loadings(:,3),est_labels);
hold off;
print(h,'-depsc','-r300') %-depsc
h=figure()
hold on
xlim([-1.2 1.2])
ylim([-1.2 1.2])
line([-1.2 1.2],[0 0],'Color','k')
line([0 0],[1.2 -1.2],'Color','k')

xlabel('Moment factor')
ylabel('Memory factor')
daspect([1,1,1])
plot(exp((-1)^.5*[0:2*pi/360:2*pi]))        % plot unit circle
box on
rgb=[0 0 1];
scatter(loadings(:,2),loadings(:,3), 'Filled');
textfit(loadings(:,2),loadings(:,3),est_labels);
hold off;
print(h,'-depsc','-r300') %-depsc

%% Scores

index_crypto=strcmp(type_assets,'1.Crypto');



 Check = {'BTC','ETH','XRP','BCH','LTC','USDT',	'CHF','.IBLUS0004','.IBBEU003D'};
Match=cellfun(@(x) ismember(x, Check), symb_assets, 'UniformOutput', 0);
index_show=find(cell2mat(Match));
%user_factor=2

for user_factor=2:3
color_assets=nan(n_assets,3); 
color_crypto=nan(n_assets,3);
[~,index_type_raw]=unique(type_assets,'stable');
index_type=[index_type_raw; n_assets];
n_types=length(index_type(1:end-1));

for i=1:n_assets
    if strcmp(type_assets{i},'1.Crypto')==1
        color_assets(i,:)=color_green;
        color_crypto(i,:)=color_green;
    elseif strcmp(type_assets{i},'2.Stock')==1
        color_assets(i,:)=color_black;
        color_crypto(i,:)=color_black;
    elseif strcmp(type_assets{i},'4.Exchange Rate')==1
        color_assets(i,:)=color_blue;
        color_crypto(i,:)=color_blue;
    elseif strcmp(type_assets{i},'5.Commodity')==1
        color_assets(i,:)=color_red;
        color_crypto(i,:)=color_red;
    elseif strcmp(type_assets{i},'3.Bond')==1
        color_assets(i,:)=color_purple;
        color_crypto(i,:)=color_purple;
    elseif strcmp(type_assets{i},'6.Real Estate')==1
        color_assets(i,:)=color_yellow;
        color_crypto(i,:)=color_yellow;

    end
end

h=figure();
scatter(F(:,1),F(:,user_factor),[],color_assets,'filled')
text_delta=0.03;

text(F(index_show,1)+text_delta,F(index_show,user_factor),...
   symb_assets(index_show));

xlabel('Tail factor');
if user_factor==2
    ylabel('Memory factor');
elseif user_factor==3
    ylabel('Moment factor');
end

hold on

for i=1

    if i==1
        user_color=color_green;

    end
x=[F(index_type(i):index_type(i+1)-1,1),...
    F(index_type(i):index_type(i+1)-1,user_factor)];

grid_add=1.15;
grid_x=min(x(:,1))-grid_add:0.05:max(x(:,1)+grid_add);
grid_y=min(x(:,2))-grid_add:0.05:max(x(:,2)+grid_add);
[x1_raw,x2_raw] = meshgrid(grid_x, grid_y);
x1 = x1_raw(:);
x2 = x2_raw(:);
xi=[x1 x2];


fd=mvksdensity(x,xi,'PlotFcn','contour');

user_level=0.05;
[C,~]=contour(grid_x,grid_y,reshape(fd,length(grid_y),length(grid_x)),[user_level,user_level],...
   'color',user_color,'linewidth',1.5);
end
end
print(h,'-depsc','-r300') %-depsc

hold off

h=figure();

scatter(F(:,2),F(:,3),[],color_assets,'filled')
text_delta=0.03;
text(F(index_show,2)+text_delta,F(index_show,3),...
   symb_assets(index_show));



xlabel('Memory factor');

ylabel('Moment factor');
hold on

for i=1

    if i==1
        user_color=color_green;
    
    end
x=[F(index_type(i):index_type(i+1)-1,2),...
    F(index_type(i):index_type(i+1)-1,3)];

grid_add=1.15;
grid_x=min(x(:,1))-grid_add:0.05:max(x(:,1)+grid_add);
grid_y=min(x(:,2))-grid_add:0.05:max(x(:,2)+grid_add);
[x1_raw,x2_raw] = meshgrid(grid_x, grid_y);
x1 = x1_raw(:);
x2 = x2_raw(:);
xi=[x1 x2];


fd=mvksdensity(x,xi,'PlotFcn','contour');

user_level=0.05;
[C,~]=contour(grid_x,grid_y,reshape(fd,length(grid_y),length(grid_x)),[user_level,user_level],...
    'color',user_color,'linewidth',1.5);
end
print(h,'-depsc','-r300') %-depsc
%% Logistic Regression

type_crypto=strcmp(type_assets,'1.Crypto');
type_crypto_mod=type_crypto+1;

[est_reg_para_1,est_reg_dev_1,est_reg_stats_1]=glmfit(F(:,1),type_crypto,'binomial','link','logit');
[est_reg_para_2,est_reg_dev_2,est_reg_stats_2]=glmfit(F(:,2),type_crypto,'binomial','link','logit');
[est_reg_para_3,est_reg_dev_3,est_reg_stats_3]=glmfit(F(:,3),type_crypto,'binomial','link','logit');
%%
%print(h,'-depsc','-r300','['class_scat1' mat2str(user_factor)]) %-depsc

%% SVM1
user_factor=2;
% train
cl = fitcsvm(F(:,1:2),type_crypto,'KernelFunction','rbf',...
    'BoxConstraint',Inf,'ClassNames',[0,1]);
F_min=min(F(:,2))-4;
% Predict scores over the grid

grid_add=2.15;

d = 0.05;
[x1Grid,x2Grid] = meshgrid(min(F(:,1)-grid_add):d:max((F(:,1)+grid_add)),...
    min(F(:,2)-grid_add):d:max((F(:,2)+grid_add)));
xGrid = [x1Grid(:),x2Grid(:)];
[~,scores] = predict(cl,xGrid);

h=figure();
text_delta=0.02;
z(1:2) = scatter(F(:,1),F(:,user_factor),[],color_crypto,'filled');
text(F(index_show,1)+text_delta,F(index_show,user_factor),...
    symb_assets(index_show));

xlim([-5 14]);


hold on
%z(3) = plot(F(cl.IsSupportVector,1),F(cl.IsSupportVector,2),'ko');
contour(x1Grid,x2Grid,reshape(scores(:,2),size(x1Grid)),[0 0],'color',color_red,'linewidth',2);

title('');
xlabel('Tail factor');ylabel('Memory factor');
hold off
print(h,'-depsc','-r300') %-depsc
SVM = fitcsvm(F(:,1:2),type_crypto,'KernelFunction','rbf',...
    'BoxConstraint',Inf,'ClassNames',[0,1]);
SVMM = fitPosterior(SVM);

%% Perform cross-validation
partitionedModel = crossval(SVM, 'KFold', 10);
% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);
% Compute validation accuracy
validation_error = kfoldLoss(partitionedModel, 'LossFun', 'ClassifError'); % validation error
validationAccuracy = 1 - validation_error;
actual= double(type_crypto);
C = confusionmat(actual,validationPredictions);
confusionchart(C);

%% SVM2
user_factor=3;
% train
cl = fitcsvm(F(:,[1 user_factor]),type_crypto,'KernelFunction','rbf',...
    'BoxConstraint',Inf,'ClassNames',[0,1]);
F_min=min(F(:,3))-4;
% Predict scores over the grid

grid_add=2.15;

d = 0.05;
[x1Grid,x2Grid] = meshgrid(min(F(:,1)-grid_add):d:max((F(:,1)+grid_add)),...
    min(F(:,3)-grid_add):d:max((F(:,3)+grid_add)));
xGrid = [x1Grid(:),x2Grid(:)];
[~,scores] = predict(cl,xGrid);

h=figure();
text_delta=0.02;
z(1:2) = scatter(F(:,1),F(:,user_factor),[],color_crypto,'filled');
text(F(index_show,1)+text_delta,F(index_show,user_factor),...
    symb_assets(index_show));
%x_lim=[-5 4];
%y_lim=[-3 4];

%ylim(y_lim);
%xlim(x_lim);
hold on
%z(3) = plot(F(cl.IsSupportVector,1),F(cl.IsSupportVector,2),'ko');
contour(x1Grid,x2Grid,reshape(scores(:,2),size(x1Grid)),[0 0],'color',color_red,'linewidth',2);

title('');
xlabel('Tail factor');ylabel('Memory factor');
hold off
print(h,'-depsc','-r300') %-depsc

%% SVM3
user_factor=3;
% train
cl = fitcsvm(F(:,[2 user_factor]),type_crypto,'KernelFunction','rbf',...
    'BoxConstraint',Inf,'ClassNames',[0,1]);
F_min=min(F(:,3))-4;
% Predict scores over the grid

grid_add=4;

d = 0.05;
[x1Grid,x2Grid] = meshgrid(min(F(:,2)-grid_add):d:max((F(:,2)+grid_add)),...
    min(F(:,3)-grid_add):d:max((F(:,3)+grid_add)));
xGrid = [x1Grid(:),x2Grid(:)];
[~,scores] = predict(cl,xGrid);

h=figure();
text_delta=0.02;
z(1:2) = scatter(F(:,2),F(:,user_factor),[],color_crypto,'filled');
text(F(index_show,2)+text_delta,F(index_show,user_factor),...
    symb_assets(index_show));
%x_lim=[-3 4.5];
%y_lim=[-3 4];

%ylim(y_lim);
%xlim(x_lim);
hold on
%z(3) = plot(F(cl.IsSupportVector,1),F(cl.IsSupportVector,2),'ko');
contour(x1Grid,x2Grid,reshape(scores(:,2),size(x1Grid)),[0 0],'color',color_red,'linewidth',2);

title('');
xlabel('Moment factor');ylabel('Memory factor');
hold off
print(h,'-depsc','-r300') %-depsc
%%

Check = {'BTC','PAX','TUSDT','USDC','EURS','USDT','CHF','GUSD','SUSD',...
    'ETH','SBD','BNT','PNT','MKR','INB','IGNIS','HNC','THR','HSN','AIB' ,'TYPE'};


Match=cellfun(@(x) ismember(x, Check), symb_assets, 'UniformOutput', 0);
index_show=find(cell2mat(Match));


%%

%% 3d
h=figure()


scatter3(F(:,3),F(:,2),F(:,1),[],color_assets,'filled','MarkerFaceAlpha',.8);
text(F(index_show,3),F(index_show,2),F(index_show,1),...
    symb_assets(index_show),'HorizontalAlignment', 'center', 'VerticalAlignment', 'bottom','fontsize',7);
%text(F(index_show,2)+text_delta,F(index_show,3)+text_delta,F(index_show,1)+text_delta,symb_assets(index_show));
   




%plot3(cmeans2(:,1),cmeans2(:,2),cmeans2(:,3),'ko');
%plot3(cmeans2(:,1),cmeans2(:,2),cmeans2(:,3),'kx');
grid on;
xlabel('Moment factor');
ylabel('Memory factor');
zlabel('Tail factor');
%view(40,30);

h1 = rotate3d(h)
%% K-means


rng(1); % For reproducibility

rng(1); % For reproducibility

K=6;

[IDX,C, ~, D] = kmeans(F,K); % D is the distance of each datapoint to each of  the clusters
[minD, indMinD] = min(D); % indMinD(i) is the index (in X) of closest point to the i-th centroid



h=figure();
%scatter3(F(:,1),F(:,2),F(:,3));

scatter3(F(:,2),F(:,3),F(:,1),40,color_crypto); 
 hold on
scatter3(F(:,2),F(:,3),F(:,1),40, IDX(:),'filled'); 

text(F(index_show,2),F(index_show,3),F(index_show,1),...
    symb_assets(index_show),'HorizontalAlignment', 'center', 'VerticalAlignment', 'bottom','fontsize',7);
    
hold off
grid on;
xlabel('Memory factor');
ylabel('Moment factor');
zlabel('Tail factor');



Mdl = fitcecoc(F,IDX);
t = templateSVM('Standardize',true);

Mdl = fitcecoc(F,IDX,'Learners',t,...
    'ClassNames',{'1' ,'2', '3' ,'4' ,'5' ,'6'});

CVMdl = crossval(Mdl);
genError = kfoldLoss(CVMdl)

 tTree = templateTree('surrogate','on');
tEnsemble = templateEnsemble('GentleBoost',100,tTree);

h=figure();            
CVMdl = crossval(Mdl);
oofLabel = kfoldPredict(CVMdl);
predict= str2double(oofLabel);
C = confusionmat(IDX,predict);
confusionchart(C);

accuracy = sum(diag (C))/sum(C,'all')


